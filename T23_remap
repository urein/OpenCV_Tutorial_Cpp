#include<opencv2/opencv.hpp>
#include<iostream>
using namespace std;
using namespace cv;

/*
remap就是把图像中的像素从一个位置变换到另一个位置。即dst中的像素完全来自于src中的像素。
由于像素的转换未必是刚好一一对应的，因此需要插值。

例如：h(x, y) = (I.cols-x, y)
显然，图像会沿x轴翻转

OpenCV: cv::remap
src：原图
dst：map后的目标图像，和src大小相同
map_x：x方向上的映射关系，大小和src一样。即dst的(i_row, i_col)像素是src中的哪个像素得来的。
map_y：y方向上的映射关系，大小和src一样。即dst的(i_row, i_col)像素是src中的哪个像素得来的。
interpolation：对map之后非integer的像素进行插值，默认值是INTER_LINEAR
bordermode：默认值是BORDER_CONSTANT
*/


void update_map(int& idx, Mat& map_x, Mat& map_y);

int main()
{
	Mat src = imread("./images/lenna.png");
	if (src.empty())
	{
		cout << "Cannot read image." << endl;
		return -1;
	}
	
	// 创建dst和映射矩阵
	Mat dst(src.size(), src.type());
	Mat map_x(src.size(), CV_32FC1);  
	Mat map_y(src.size(), CV_32FC1);

	namedWindow("Remap demo", WINDOW_AUTOSIZE);

	for (int idx = 0; idx != 4; ++idx)
	{
		// 填充映射矩阵
		update_map(idx, map_x, map_y);
		
		// 根据填充好映射关系的映射矩阵进行mapping，得到dst。
		// dst中没有在src中找到映射关系的像素填充为指定颜色
		remap(src, dst, map_x, map_y, INTER_LINEAR, BORDER_CONSTANT, Scalar(0, 0, 0));
		
		imshow("Remap demo", dst);
		
		char c = waitKey(2000);
		if (c == 27)
			break;
	}
	return 0;
}


void update_map(int& idx, Mat& map_x, Mat& map_y)
{
	// 获取dst中的各个像素值
	for (int row = 0; row != map_x.rows; ++row)
	{
		for (int col = 0; col != map_x.cols; ++col)
		{
			switch (idx)
			{
			case 0:
				// 将原图长宽均缩短为原先的一半，并显示在中央。外围地方用某种颜色填充。
				if (col > map_x.cols * 0.25 && col < map_x.cols * 0.75 && row > map_x.rows * 0.25 && row < map_x.rows * 0.75)
				{
					// dst中由src映射过来的像素只可能位于图大小的0.25到0.75之间。
					// row, col均是dst上的值。dst上(row, col)处x轴方向上的像素是src中x轴为2*(col-map_x.cols*0.25)处的像素，y轴同理。
					map_x.at<float>(row, col) = 2 * (col - map_x.cols * 0.25);  // 因为map_x的类型是CV_32FC1所以这里必须是float
					map_y.at<float>(row, col) = 2 * (row - map_x.rows * 0.25);
				}
				else
				{
					// dst中范围之外的像素用src(100, 100)处的像素填充
					map_x.at<float>(row, col) = 100;  
					map_y.at<float>(row, col) = 100;
				}
				break;
			case 1:
				// 将src沿竖直方向翻转
				map_x.at<float>(row, col) = col;  // dst中(row, col)位置的x轴上的像素就是原图col位置的像素
				map_y.at<float>(row, col) = map_x.rows - row;  // dst中(row, col)位置的y轴上的像素，就是图像高度减去原图的row，实现y轴上的翻转
				break;
			case 2:
				// 将src沿水平方向翻转
				map_x.at<float>(row, col) = map_x.cols - col;  // x轴翻转
				map_y.at<float>(row, col) = row;  // y轴不动
				break;
			case 3:
				// 将src沿水平方向和竖直方向翻转
				map_x.at<float>(row, col) = map_x.cols - col;  // x轴翻转
				map_y.at<float>(row, col) = map_x.rows - row;  // y轴翻转
				break;
			default:
				break;
			}
		}
	}
}
