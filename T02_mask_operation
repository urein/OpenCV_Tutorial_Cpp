#include<opencv2/opencv.hpp>
#include<iostream>
using namespace std;
using namespace cv;


int main()
{
	Mat src = imread("./images/vague.jpg");

	if (src.empty()) {
		cout << "could not load image ..." << endl;
		return -1;
	}
	imshow("source image", src);

	auto n_channels = src.channels();
	auto n_cols = src.cols * n_channels;
	auto n_rows = src.rows;

	Mat dst = Mat::zeros(src.size(), src.type());  // h * w * 3

	// OpenCV中RGB图像的排列方式: [col1[rgb] | col2[rgb] | ... | ...]
	// I(i, j) = 5 * I(i,j) - [I(i-1, j) + I(i+1,j) + I(i, j-1) + I(i, j+1)]
	for (int row = 1; row != n_rows - 1; ++row)
	{
		// 因为像素值在0-255之间，索引类型是uchar
		const uchar* pPre = src.ptr<uchar>(row - 1);
		const uchar* pCur = src.ptr<uchar>(row);  // 获取第row行第一个像素的指针，每一行的shape为 (1, n_cols*n_channels)
		const uchar* pNext = src.ptr<uchar>(row + 1);
		uchar* pOut = dst.ptr<uchar>(row);

		for (int col = n_channels; col != n_cols - n_channels; ++col)
			// saturate_cast<uchar>把值的区间限制在0-255
			pOut[col] = saturate_cast<uchar>(5 * pCur[col] - (pPre[col] + pNext[col] + pCur[col - n_channels] + pCur[col + n_channels]));
	}
	imshow("sharp image", dst);

	waitKey(0);

	return 0;
}
