#include<opencv2/opencv.hpp>
#include<iostream>
using namespace std;
using namespace cv;

int main()
{

	// read image
	Mat src = imread("./images/lenna.jpg");
	if (src.empty()) {
		cout << "could not load image ..." << endl;
	}
	else {
		namedWindow("source image", WINDOW_AUTOSIZE);
		imshow("source image", src);
		waitKey(0);
	}

	Mat dst = Mat::zeros(src.size(), src.type());  // initialize mat object
	cout << src.size();
	cout << src.type();

	// Save Model of RGB image in OpenCV: [col1[rgb] | col2[rgb] | ... | ...]
	// self-defined convolution operation with filter mask [[0,-1,0], [-1,5,-1], [0,-1,0]] for image sharpening
	int n_channels = src.channels();
	int n_rows = src.rows;
	int n_cols = src.cols * n_channels - n_channels;  
	
	for (int row = 1; row < n_rows-1; row++) 
	{
		const uchar* previous = src.ptr<uchar>(row - 1);  // upper line
		const uchar* current = src.ptr<uchar>(row);
		const uchar* next = src.ptr<uchar>(row + 1);  // lower line
		uchar* output = dst.ptr<uchar>(row);
		for (int col = n_channels; col < n_cols - 1; col++) 
		{
			// saturate_cast<uchar> function maps any value in [0, 255]
			output[col] = saturate_cast<uchar>(5 * current[col] - (current[col - n_channels] + current[col + n_channels] + previous[col] + next[col]));
		}
	}

	namedWindow("sharpened image", WINDOW_AUTOSIZE);
	imshow("sharpened image", dst);
	
	waitKey(0);

	return 0;
}
