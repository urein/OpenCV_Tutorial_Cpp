#include<opencv2/opencv.hpp>
#include<iostream>
using namespace std;
using namespace cv;


int main()
{
	Mat src = imread("./images/vague.jpg");

	if (src.empty()) {
		cout << "could not load image ..." << endl;
		return -1;
	}
	imshow("source image", src);


	// ======== Mat的构造 ========

	// clone
	Mat m_clone = src.clone();
	imshow("Clone", m_clone);

	// copyto
	Mat m_copy;
	src.copyTo(m_copy);
	imshow("Copy", m_copy);

	// 一种普通构造：Mat(int rows, int cols, int type, const Scalar& s)
	// Scalar(b, g, r)表示彩图像素的值，Scalar(g)表示灰度图像素的值
	Mat m(6, 3, CV_8UC3, Scalar(0, 0, 255));  // 8位无符号char，三通道
	cout << "m.size: " << m.size << endl;  // 6*3
	cout << "m:\n" << m << endl;
	
    // 拷贝构造：只会复制m的头和指针，不会复制数据。完全赋值则需要使用clone()和copyTo()
	Mat m1(m);
	cout << "m1:\n" << m1 << endl;

	// 创建高维数组
	//vector<int> sz = { 2, 2, 2 };
	int sz[3] = { 2, 2, 2 };
	Mat L(3, sz, CV_8UC1, Scalar::all(0));
	cout << "L.size: " << L.size << endl;  // 2*2*2

	Mat m3;
	m3.create(4, 3, CV_8UC2);  // 可以通过create创建Mat
	m3 = Scalar(127, 127);

	Mat dst(src.size(), src.type());
	dst = Scalar(127, 0, 255);  // 每个像素的RGB都是127，0，255

	// 定义kernel
	Mat kernel = (Mat_<char>(3, 3) << 0, -1, 0, -1, 5, -5, 0, -1, 0);
	cout << kernel << endl;

	Mat mZero = Mat::zeros(3, 3, CV_8UC2);  // 2各通道，所以有6列0
	cout << mZero << endl;
	Mat mEye = Mat::eye(3, 3, CV_8UC1);  // 单位矩阵
	cout << mEye << endl;


	// 完全拷贝
	dst = src.clone();
	src.copyTo(dst);

	cvtColor(src, dst, COLOR_BGR2GRAY);
	src.channels();

	// 行数、列数、通道数
	int nRows = dst.rows;
	auto nCols = dst.cols;
	auto nChannels = dst.channels();
	cout << "Row: " << nRows << endl;
	cout << "Cols: " << nCols << endl;
	cout << "Channels: " << nChannels << endl;

	// 获取行指针
	const uchar* pFirstRow = dst.ptr<uchar>(0);
	cout << *pFirstRow << endl;

	imshow("dst", dst);

	waitKey(0);

	return 0;
}
